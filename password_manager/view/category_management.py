#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Feb 04, 2020 07:07:23 PM CET  platform: Windows NT

import sys
import view.window_util as window_util
import tkinter as tk
import support.category_management_support as category_management_support
import platform
from tkinter import ttk

def create_categ_man_window(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel(root)
    top = CategManWindow(w)
    category_management_support.init(w, top, *args, **kwargs)
    return w, top


def destroy_categ_man_window():
    global w
    w.destroy()
    w = None


class CategManWindow:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=
            [('selected', _compcolor), ('active', _ana2color)])

        width = 562
        height = 423
        
        center = window_util.get_center_points(top, width, height)
        
        top.geometry("{}x{}+{}+{}".format(width, height, center[0], center[1]))
        
        top.minsize(120, 1)
        top.maxsize(1284, 701)
        top.resizable(0, 0)
        top.title("Category Management")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        top.iconbitmap(window_util.get_icon_path())

        self.header = tk.Frame(top)
        self.header.place(relx=0.0, rely=0.0, relheight=0.106, relwidth=1.0)
        self.header.configure(relief='groove')
        self.header.configure(borderwidth="2")
        self.header.configure(relief="groove")
        self.header.configure(background="#d9d9d9")
        self.header.configure(highlightbackground="#d9d9d9")
        self.header.configure(highlightcolor="black")

        self.frameCatMenu = tk.Frame(self.header)
        self.frameCatMenu.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=0.15)
        self.frameCatMenu.configure(relief='groove')
        self.frameCatMenu.configure(borderwidth="2")
        self.frameCatMenu.configure(relief="groove")
        self.frameCatMenu.configure(background="#d9d9d9")
        self.frameCatMenu.configure(highlightbackground="#d9d9d9")
        self.frameCatMenu.configure(highlightcolor="black")

        self.btnNewCat = tk.Button(self.frameCatMenu)
        self.btnNewCat.place(relx=0.12, rely=0.156, height=24, width=55)
        self.btnNewCat.configure(activebackground="#ececec")
        self.btnNewCat.configure(activeforeground="#000000")
        self.btnNewCat.configure(background="#d9d9d9")
        self.btnNewCat.configure(disabledforeground="#a3a3a3")
        self.btnNewCat.configure(foreground="#000000")
        self.btnNewCat.configure(highlightbackground="#d9d9d9")
        self.btnNewCat.configure(highlightcolor="black")
        self.btnNewCat.configure(pady="0")
        self.btnNewCat.configure(text='''New''')

        self.frameCatActions = tk.Frame(self.header)
        self.frameCatActions.place(relx=0.534, rely=0.0, relheight=1.0, relwidth=0.472)
        self.frameCatActions.configure(relief='groove')
        self.frameCatActions.configure(borderwidth="2")
        self.frameCatActions.configure(relief="groove")
        self.frameCatActions.configure(background="#d9d9d9")
        self.frameCatActions.configure(highlightbackground="#d9d9d9")
        self.frameCatActions.configure(highlightcolor="black")

        self.btnCatInfo = tk.Button(self.frameCatActions)
        self.btnCatInfo.place(relx=0.038, rely=0.156, height=24, width=75)
        self.btnCatInfo.configure(activebackground="#ececec")
        self.btnCatInfo.configure(activeforeground="#000000")
        self.btnCatInfo.configure(background="#d9d9d9")
        self.btnCatInfo.configure(disabledforeground="#a3a3a3")
        self.btnCatInfo.configure(foreground="#000000")
        self.btnCatInfo.configure(highlightbackground="#d9d9d9")
        self.btnCatInfo.configure(highlightcolor="black")
        self.btnCatInfo.configure(pady="0")
        self.btnCatInfo.configure(text='''Details''')
        self.btnCatInfo.configure(state="disabled")

        self.btnCatEdit = tk.Button(self.frameCatActions)
        self.btnCatEdit.place(relx=0.34, rely=0.156, height=24, width=75)
        self.btnCatEdit.configure(activebackground="#ececec")
        self.btnCatEdit.configure(activeforeground="#000000")
        self.btnCatEdit.configure(background="#d9d9d9")
        self.btnCatEdit.configure(disabledforeground="#a3a3a3")
        self.btnCatEdit.configure(foreground="#000000")
        self.btnCatEdit.configure(highlightbackground="#d9d9d9")
        self.btnCatEdit.configure(highlightcolor="black")
        self.btnCatEdit.configure(pady="0")
        self.btnCatEdit.configure(text='''Edit''')
        self.btnCatEdit.configure(state="disabled")

        self.btnCatDelete = tk.Button(self.frameCatActions)
        self.btnCatDelete.place(relx=0.649, rely=0.156, height=24, width=75)
        self.btnCatDelete.configure(activebackground="#ececec")
        self.btnCatDelete.configure(activeforeground="#000000")
        self.btnCatDelete.configure(background="#d9d9d9")
        self.btnCatDelete.configure(disabledforeground="#a3a3a3")
        self.btnCatDelete.configure(foreground="#000000")
        self.btnCatDelete.configure(highlightbackground="#d9d9d9")
        self.btnCatDelete.configure(highlightcolor="black")
        self.btnCatDelete.configure(pady="0")
        self.btnCatDelete.configure(text='''Delete''')
        self.btnCatDelete.configure(state="disabled")

        self.frameCatBody = tk.Frame(top)
        self.frameCatBody.place(relx=0.0, rely=0.095, relheight=0.851, relwidth=1.0)
        self.frameCatBody.configure(relief='groove')
        self.frameCatBody.configure(borderwidth="2")
        self.frameCatBody.configure(relief="groove")
        self.frameCatBody.configure(background="#d9d9d9")
        self.frameCatBody.configure(highlightbackground="#d9d9d9")
        self.frameCatBody.configure(highlightcolor="black")

        self.style.configure('Treeview',  font="TkDefaultFont")
        self.CategoryTreeView = ScrolledTreeView(self.frameCatBody)
        self.CategoryTreeView.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1)
        self.CategoryTreeView.configure(columns="Col1 Col2")
        # build_treeview_support starting.
        self.CategoryTreeView.heading("#0",text="ID")
        self.CategoryTreeView.heading("#0",anchor="w")
        self.CategoryTreeView.column("#0",width="0")
        self.CategoryTreeView.column("#0",minwidth="0")
        self.CategoryTreeView.column("#0",stretch="0")
        self.CategoryTreeView.column("#0",anchor="w")
        self.CategoryTreeView.heading("Col1",text="Name")
        self.CategoryTreeView.heading("Col1",anchor="center")
        self.CategoryTreeView.column("Col1",width="150")
        self.CategoryTreeView.column("Col1",minwidth="20")
        self.CategoryTreeView.column("Col1",stretch="1")
        self.CategoryTreeView.column("Col1",anchor="c")
        self.CategoryTreeView.heading("Col2",text="Description")
        self.CategoryTreeView.heading("Col2",anchor="center")
        self.CategoryTreeView.column("Col2",width="400")
        self.CategoryTreeView.column("Col2",minwidth="20")
        self.CategoryTreeView.column("Col2",stretch="1")
        self.CategoryTreeView.column("Col2",anchor="c")


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() | tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped


class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))


def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')


def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')


def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')