"""
Support GUI module for new entry form.

Generated by PAGE version 4.26
in conjunction with Tcl version 8.6

Created on Feb 03, 2020
@author: nenad.dramicanin
"""

import model.data_model as data_model
import model.services as services
import model.settings as settings
import tkinter as tk


def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    gui.update_parent = False
    gui.btnCancel.configure(command=destroy_window)
    gui.btnCreate.configure(command=on_btn_create)

    # Configuring type option list
    type_menu = gui.typeSelMenu["menu"]
    type_menu.delete(0, "end")
    for val in [e.value for e in data_model.EntryType]:
        type_menu.add_command(label=val, command=lambda value=val: gui.selType.set(value))
        type_menu.configure(activebackground="#a7a7a7", background="#d9d9d9")
        type_menu.configure(foreground="#000000", activeforeground="#000000")
    gui.selType.trace('w', on_option_select)

    # Configuring category option list
    cat_menu = gui.catSelMenu["menu"]
    cat_menu.delete(0, "end")
    for val in [c.name for c in services.category_list()]:
        cat_menu.add_command(label=val, command=lambda value=val: gui.selCat.set(value))
        cat_menu.configure(background="#d9d9d9", activebackground="#a7a7a7")
        cat_menu.configure(foreground="#000000", activeforeground="#000000")


def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None


def on_option_select(*args):
    """Based on an entry type handles e-mail and username field.

    If option 'Account' is selected then e-mail and username fields will be enabled and filled with existing values
    """

    option = w.selType.get()
    state_val = "disabled"
    if option == "account":
        state_val = "normal"
    else:
        w.entryEmail.delete(0, 'end')
        w.entryUsername.delete(0, 'end')
        
    w.entryEmail.configure(state=state_val)
    w.entryUsername.configure(state=state_val)

    # Enables 'Default e-mail' checkbox if one is defined
    if settings.get_default_email() is not None and settings.get_default_email() != "":
        w.checkDefEmail.configure(state=state_val)
        w.checkDefEmail.configure(command=on_check_email)


def on_btn_create():
    """Validates form data and initiates create action"""

    sel_type = w.selType.get()
    sel_catg = w.selCat.get()
    name = w.entryName.get()
    value = w.entryValue.get()
    description = w.textDesc.get("1.0", tk.END) if not w.textDesc.get("1.0", tk.END).isspace() else ""
    
    email = w.entryEmail.get()
    username = w.entryUsername.get()

    # Type is mandatory field
    if sel_type == 'Please select':
        w.lblMsg.config(text = 'Type can\'t be empty')
        return

    # Category is mandatory field
    if sel_catg == 'Please select':
        w.lblMsg.config(text = 'Category can\'t be empty')
        return

    # Name is mandatory field
    if name.isspace() or len(name) == 0:
        w.lblMsg.config(text='Name can\'t be empty!')
        return

    # Value is mandatory field
    if value.isspace() or len(value) == 0:
        w.lblMsg.config(text='Value can\'t be empty!')
        return

    # For 'Account' entries either e-mail or username must be defined (or both)
    if (sel_type == 'account' and ((email.isspace() or len(email) == 0) 
                                   and (username.isspace() or len(username) == 0))):
        w.lblMsg.config(text='Account must have username or e-mail value!')
        return
      
    services.entry_add(name, value, sel_type, sel_catg, description, username, email)
    
    w.lblMsg.configure(foreground="#008000")
    w.lblMsg.config(text='New entry added!')
    w.update_parent = True
    destroy_window()


def on_check_email():
    """Sets e-mail field value to defined default e-mail"""

    email = ""
    if w.chDfEmVal.get():
        email = settings.get_default_email()
    w.entryEmail.delete(0, 'end')  
    w.entryEmail.insert(0, email)
